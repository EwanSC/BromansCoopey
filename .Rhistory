'Ljubuski / Mlade / Bigeste',
'Veljaci / Bigeste'),
'Bigeste', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Bihac / Raetinium',
'Golubic / Raetinium',
'Pritoka / Raetinium',
'Ribic / Raetinium',
'Jezerine, Golubic'),
'Raetinium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Brac, Otok / Brattia',
'Skrip / Brattia'),
'Brattia', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Bribir / Bribirska Glavica / Varvaria',
'Lastve, Bribir'),
'Varvaria', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Budva / Buthoe'),
'Buthoe', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Cacak / Malvesiatium',
'Rudo / Municipium Malvesatium'),
'Municipium Malvesatium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Caska / Cissa'),
'Cissa', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Cavtat / Epidaurum'),
'Epidaurum', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Citluk / Aequum'),
'Aequum', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Danilo Gornje / Rider',
'Sibenik / Rider',
'Grusine, Sibenik'),
'Rider', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Dol / Pharia',
'Hvar / Lesina / Pharia'),
'Pharia', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Donje Biljane / Iader',
'Galovac / Iader',
'Zadar / Iader'),
'Iader', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Dubrava / Diluntum',
'Stolac / Rotimlja / Megjina / Diluntum'),
'Diluntum', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Duklja / Duklje / Rusevine / Doclea'),
'Doclea', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Gradina / Domavium'),
'Domavium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Janjina / Peljesac / Sabbioncello / Narona',
'Metkovic / Narona',
'Vid / Narona'),
'Narona', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Kapitul - Knin'),
'Kapitul', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Karin Gornji / Corinium'),
'Corinium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Klis / Clissa'),
'Cliss', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Kljake / Municipium Magnum',
'Ruzic / Balijna Glavica / Municipium Magnum'),
'Municipium Magnum', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Kolovrat / Municipium Splonistarum',
'Prijepolje / Municipium Splonistarum'),
'Municipium Splonistarum', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Koplik / Cinna'),
'Cinna', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Korcula / Nigra Corcyra'),
'Corcyra Nigra', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Kornat, Otok'),
'Kornat', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Kotor / Acruvium'),
'Acruvium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Krk, Otok / Curictae'),
'Curictae', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Krklic, Pakostane'),
'Pakostane', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Krug, Jesenice'),
'Jesenice', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Labin / Alvona'),
'Alvona', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Lastovo / Lagosta / Ladesta'),
'Lastovo', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Lezhe / Lest / Lissus'),
'Lissus', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Listani / Lastani'),
'Listani', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Livno / Bariduum / Delminium',
'Prisoje / Delminium',
'Suhaca / Delminium',
'Tomislavgrad / Duvno / Zupanjac / Delminium'),
'Delminium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Mali Losinj / Apsorus'),
'Apsorus', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Medvida / Medvigge / Hadra / Sidrona'),
'Sidrona', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Niksic / Mons Nigia / Anderva'),
'Anderva', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Nin / Aenona'),
'Aenona', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Obrovac / Clambetae'),
'Clambetae', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Omis / Almissa / Oneum / Onaeum'),
'Oneum', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Omisalj / Fulfinum'),
'Fulfinum', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Osor / Opsorus'),
'Opsorus', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Ostrovica / Alveria'),
'Alveria', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Perast / Risinium',
'Risan / Risano / Risinium'),
'Risinium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Plomin / Flanona'),
'Flanona', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Podstrana / Pituntium'),
'Pituntium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Rab, Otok / Arba'),
'Arba', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Ruduse / Rudusa'),
'Rudusa', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Runovici / Runovic / Novae'),
'Novae', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Seget Donji / Tragurium',
'Trogir / Tragurium'),
'Tragurium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Senj / Segna / Zengg / Senia'),
'Senia', `cleaned_place`))%>%
mutate(`cleaned_place`=ifelse(place %in% c('Shkoder / Shkodra / Skutari / Scodra'),
'Scodra', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Sinj / Osinium'),
'Osinium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Skradin / Scardona'),
'Scardona', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Solta, Otok / Solentia'),
'Solentia', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Split / Spalatum'),
'Spalatum', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Stari Grad / Argyruntum'),
'Argyruntum', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Stobrec / Epetino / Epetium'),
'Epetium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Sveti Juraj / Lopsica'),
'Lopsica', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Tepljuh / Promona'),
'Promona', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Tivat / Teodo'),
'Teodo', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Trsat / Tersatto / Tarsatica'),
'Tarsatica', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Vele Srakane / Canidole Grande'),
'Vele Srakane', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Veli Bijac / Bijaci / Bijaca / Siculi'),
'Siculi', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Velika Kopanica / Kopjenica'),
'Kopjenica', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Vis / Issa'),
'Issa', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Vitalj, Otocac / Arupium'),
'Arupium', `cleaned_place`)) %>%
mutate(`cleaned_place`=ifelse(place %in% c('Zaostrog / Zastrogh'),
'Zaostrog', `cleaned_place`))
clean_firstcent_data <- clean_firstcent_epig_data %>%
select(`EDCS-ID`,publication,province,`place`,`cleaned_place`,`dating_from`,`dating_to`,status,inscription,`inscription_interpretive_cleaning`,latitude,longitude,comment,photo) %>%
group_by(`cleaned_place`)
return(clean_firstcent_data)
}
# example of deploying this in another script:
# "df" <- load_epig_data("data/2022-08-29-EDCS_via_Lat_Epig-prov_Dalmatia-10140.json")
# Primary_map
# Ewan Coopey
# created 17/12/2021 (uncertain)
# last edit: 29/08/2022
# Download required data and shape files to make province of Dalmatia map for plotting
# and test this map
library(sf)
library(ggplot2)
library(dplyr)
library("rnaturalearthdata")
library("rnaturalearth")
library("rnaturalearthhires")
# couldn't download rnaturalearthhires
# fixed with https://stackoverflow.com/questions/66294044/rnaturalearthhires-package-installation-error
# following https://datacarpentry.org/r-raster-vector-geospatial/06-vector-open-shapefile-in-r/index.html
roman_69_map <- st_read(
"shape_files/roman_empire_ad_69_extent.shp")
# bring world geo data from rnatural earth
world <- ne_countries(scale = "large", returnclass = "sf")
class(world)
# wasn't working, but issue explained by https://stackoverflow.com/questions/64929640/opening-shapefile-with-sf-in-r-gives-an-error
st_geometry_type(roman_69_map)
st_crs(roman_69_map)
st_bbox(roman_69_map)
ncol(roman_69_map)
names(roman_69_map)
head(roman_69_map)
roman_69_provinces <- st_read(
"shape_files/roman_empire_ad_69_provinces.shp")
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
ggtitle("Roman Empire 69 CE", subtitle = "Dalmatia") +
coord_sf(xlim = c(13, 21), ylim = c(41.5, 46)) +
theme_void()
roman_69_provinces <- st_read(
"shape_files/roman_empire_ad_69_provinces.shp")
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_69_roads, colour = 'orange')+
ggtitle("Roman Empire 69 CE", subtitle = "Dalmatia") +
coord_sf(xlim = c(13, 21), ylim = c(41.5, 46)) +
theme_void()
roman_69_roads <- st_read(
"shape_files/Roman_roads.shp")
roman_69_roads <- st_read(
"shape_files/Roman_roads.shp")
roman_69_roads <- st_read(
"shape_files/Roman_roads.shp")
roman_69_roads <- st_read(
"shape_files/Roman_roads.shp")
library(sf)
library(ggplot2)
library(dplyr)
library("rnaturalearthdata")
library("rnaturalearth")
library("rnaturalearthhires")
roman_69_map <- st_read(
"shape_files/roman_empire_ad_69_extent.shp")
# bring world geo data from rnatural earth
world <- ne_countries(scale = "large", returnclass = "sf")
class(world)
# wasn't working, but issue explained by https://stackoverflow.com/questions/64929640/opening-shapefile-with-sf-in-r-gives-an-error
st_geometry_type(roman_69_map)
st_crs(roman_69_map)
st_bbox(roman_69_map)
ncol(roman_69_map)
names(roman_69_map)
head(roman_69_map)
roman_69_provinces <- st_read(
"shape_files/roman_empire_ad_69_provinces.shp")
roman_69_roads <- st_read(
"shape_files/Roman_roads.shp")
# making a scatter plot with data from Bromans Dataset
# source data: https://doi.org/10.6078/M7X34VK8
# Author: Ewan Coopey
# Creation: 29/06/2022
# Last Edit: 05/07/2022
# CC BY SA 4.0
# First, load packages (import if first time using install.packages).
# If you have issues downloading "rnaturalearthhires" follow guide here: https://stackoverflow.com/questions/66294044/rnaturalearthhires-package-installation-error
library(tibble)
library(data.table)
library(dplyr)
library(sqldf)
library(ggplot2)
library(ggrepel)
library(sf)
library("svglite")
library("rnaturalearthdata")
library("rnaturalearth")
library("rnaturalearthhires")
# lets make a map
# first bring world geo data from rnatural earth
world <- ne_countries(scale = "large", returnclass = "sf")
class(world)
# lets load a roman provinces shapefile (c.69 CE)
roman_69_provinces <- st_read(
roman_69_provinces <- st_read(
"shape_files/roman_empire_ad_69_provinces.shp")
# making a scatter plot with data from Bromans Dataset
# source data: https://doi.org/10.6078/M7X34VK8
# Author: Ewan Coopey
# Creation: 05/06/2023
# Last Edit: 05/06/2023
# CC BY SA 4.0
# First, load packages (import if first time using install.packages).
# If you have issues downloading "rnaturalearthhires" follow guide here: https://stackoverflow.com/questions/66294044/rnaturalearthhires-package-installation-error
library(tibble)
# making a scatter plot with data from Bromans Dataset
# source data: https://doi.org/10.6078/M7X34VK8
# Author: Ewan Coopey
# Creation: 05/06/2023
# Last Edit: 05/06/2023
# CC BY SA 4.0
# First, load packages (import if first time using install.packages).
# If you have issues downloading "rnaturalearthhires" follow guide here: https://stackoverflow.com/questions/66294044/rnaturalearthhires-package-installation-error
library(tibble)
library(data.table)
library(dplyr)
library(sqldf)
library(ggplot2)
library(ggrepel)
library(sf)
library("svglite")
library("rnaturalearthdata")
library("rnaturalearth")
library("rnaturalearthhires")
# lets make a map
# first bring world geo data from rnatural earth
world <- ne_countries(scale = "large", returnclass = "sf")
class(world)
# lets load a roman provinces shapefile (c.69 CE)
roman_69_provinces <- st_read(
"shape_files/roman_empire_ad_69_provinces.shp")
Epigraphy <- read.csv('publication_files/Servicemen-places-Pleiades-links.csv')
str(Epigraphy)
View(Epigraphy)
allmonumentsplace <- na.omit(Epigraphy %>%
select(Town,Lat,Lon) %>%
group_by(Town) %>%
count(Town,Lat,Lon) %>%
arrange(desc(n)))
(allmonumentsll <- st_as_sf(allmonumentsplace, coords = c('Lon', 'Lat'), remove = FALSE,
crs = 4326, agr = "constant"))
roman_roads <- st_read(
"shape_files/Roman_roads.shp")
yes
YES
# lets load a roman provinces shapefile (c.69 CE)
roman_69_provinces <- st_read(
"shape_files/roman_empire_ad_69_provinces.shp")
roman_roads <- st_read(
"shape_files/Roman_roads.shp")
Epigraphy <- read.csv('publication_files/Servicemen-places-Pleiades-links.csv')
str(Epigraphy)
allmonumentsplace <- na.omit(Epigraphy %>%
select(Town,Lat,Lon) %>%
group_by(Town) %>%
count(Town,Lat,Lon) %>%
arrange(desc(n)))
(allmonumentsll <- st_as_sf(allmonumentsplace, coords = c('Lon', 'Lat'), remove = FALSE,
crs = 4326, agr = "constant"))
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey")
geom_sf(data = allmonumentsll, aes(size = n), alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia") +
coord_sf(default_crs = st_crs(4326), xlim = c(14, 20), ylim = c(42, 45.5)) +
theme(text = element_text(family = "Helvetica"))
ggplot
## plotting
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, aes(size = n), alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia") +
coord_sf(default_crs = st_crs(4326), xlim = c(14, 20), ylim = c(42, 45.5)) +
theme(text = element_text(family = "Helvetica"))
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, aes(size = n), alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia") +
coord_sf(default_crs = st_crs(4326)) +
theme(text = element_text(family = "Helvetica"))
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia") +
coord_sf(default_crs = st_crs(4326)) +
theme(text = element_text(family = "Helvetica"))
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia") +
coord_sf(default_crs = st_crs(4326))
## plotting
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia") +
coord_sf(default_crs = st_crs(4326), xlim = c(6,36), ylim = c(30,46))
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia") +
coord_sf(default_crs = st_crs(4326), xlim = c(6,36), ylim = c(32,47))
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia") +
coord_sf(default_crs = st_crs(4326), xlim = c(1,36), ylim = c(32,47))
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia") +
coord_sf(default_crs = st_crs(4326), xlim = c(3,36), ylim = c(32,47))
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia ('City of Origin')") +
coord_sf(default_crs = st_crs(4326), xlim = c(3,36), ylim = c(32,47)) +
theme_void()
Tilurium <- matrix(ncol = 3)
colnames(Tilurium) <- c('site','Lat','Lon')
Tilurium <- c("Tilurium",43.609647549, 16.7216523938)
Tilurium[nrow(Tilurium) + 1,] <- c("Tilurium",43.609647549, 16.7216523938)
Tilurium[nrow(Tilurium) + 1,] <- c("Tilurium","43.609647549", "16.7216523938")
## adding tilurium separately
Tilurium <- matrix(ncol = 3)
colnames(Tilurium) <- c('site','Lat','Lon')
Tilurium[nrow(Tilurium) + 1,] <- list("Tilurium","43.609647549", "16.7216523938")
Tilurium <- Tilurium(add_row(site = "Tilurium", Lat = 43.609647549, Lon = 16.7216523938))
Tilurium <- add_row(site = "Tilurium", Lat = 43.609647549, Lon = 16.7216523938)
Tilurium <- Tilurium %>%
add_row(site = "Tilurium", Lat = 43.609647549, Lon = 16.7216523938)
tilurium <- read.csv('r_scripts/tilurium.csv')
tilurium <- read.csv('r_scripts/tilurium.csv')
(allmonumentsll <- st_as_sf(tilurium, coords = c('Lon', 'Lat'), remove = FALSE,
crs = 4326, agr = "constant"))
# first bring world geo data from rnatural earth
world <- ne_countries(scale = "large", returnclass = "sf")
class(world)
# lets load a roman provinces shapefile (c.69 CE)
roman_69_provinces <- st_read(
"shape_files/roman_empire_ad_69_provinces.shp")
roman_roads <- st_read(
"shape_files/Roman_roads.shp")
Epigraphy <- read.csv('publication_files/Servicemen-places-Pleiades-links.csv')
str(Epigraphy)
allmonumentsplace <- na.omit(Epigraphy %>%
select(Town,Lat,Lon) %>%
group_by(Town) %>%
count(Town,Lat,Lon) %>%
arrange(desc(n)))
(allmonumentsll <- st_as_sf(allmonumentsplace, coords = c('Lon', 'Lat'), remove = FALSE,
crs = 4326, agr = "constant"))
tilurium <- read.csv('r_scripts/tilurium.csv')
(tiluriumll <- st_as_sf(tilurium, coords = c('Lon', 'Lat'), remove = FALSE,
crs = 4326, agr = "constant"))
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
geom_sf(data = tiluriumll, alpha=0.6, colour = 'blue')
labs(size = 'Inscribed Monuments') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia ('City of Origin') in the CIRSL Dataset") +
coord_sf(default_crs = st_crs(4326), xlim = c(3,36), ylim = c(32,47)) +
theme_void()
## plotting
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
geom_sf(data = tiluriumll, alpha=0.6, colour = 'blue') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia ('City of Origin') in the CIRSL Dataset") +
coord_sf(default_crs = st_crs(4326), xlim = c(3,36), ylim = c(32,47)) +
theme_void()
## plotting
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
geom_sf(data = tiluriumll, aes(map_id = site, fill = color), alpha=0.6, colour = 'blue') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia ('City of Origin') in the CIRSL Dataset") +
coord_sf(default_crs = st_crs(4326), xlim = c(3,36), ylim = c(32,47)) +
theme_void()
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
geom_sf(data = tiluriumll, aes(map_id = Site, fill = color), alpha=0.6, colour = 'blue') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia ('City of Origin') in the CIRSL Dataset") +
coord_sf(default_crs = st_crs(4326), xlim = c(3,36), ylim = c(32,47)) +
theme_void()
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
geom_sf(data = tiluriumll, alpha=0.6, colour = 'blue') +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia ('City of Origin') in the CIRSL Dataset") +
coord_sf(default_crs = st_crs(4326), xlim = c(3,36), ylim = c(32,47)) +
theme_void()
## plotting
ggplot() +
geom_sf(data = world, color = "darkgrey", fill = "lightgrey") +
geom_sf(data = roman_69_provinces, colour = 'black') +
geom_sf(data = roman_roads, colour = "darkgrey") +
geom_sf(data = allmonumentsll, alpha=0.6, colour = '#cd2026') +
geom_sf(data = tiluriumll, alpha=0.6, colour = 'blue') +
labs() +
ggtitle("Origins of Legio VII Legionaries in Dalmatia", subtitle = "Recorded Domicilia ('City of Origin') in the CIRSL Dataset") +
coord_sf(default_crs = st_crs(4326), xlim = c(3,36), ylim = c(32,47)) +
theme_void()
